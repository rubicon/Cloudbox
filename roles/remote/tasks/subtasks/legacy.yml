#########################################################################
# Title:         Cloudbox: Remote | Legacy Tasks                        #
# Author(s):     desimaniac                                             #
# URL:           https://github.com/Cloudbox/Cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
# Community - rclone.service

- name: "Legacy | Check if 'rclone.service' exists"
  stat:
    path: "/etc/systemd/system/rclone.service"
  register: rclone_service

- name: "Legacy | Tasks for 'rclone.service'"
  block:

  - name: "Legacy | Stop and disable existing 'rclone.service'"
    systemd: name=rclone state=stopped enabled=no

  - name: "Legacy | Rename 'rclone.service' to 'rclone_vfs.service'"
    shell: "mv /etc/systemd/system/rclone.service /etc/systemd/system/rclone_vfs.service"

  - name: "Legacy | Edit title in new 'rclone_vfs.service'"
    replace:
      path: /etc/systemd/system/rclone_vfs.service
      regexp: "rclone\\.service"
      replace: 'rclone_vfs.service'

  - name: "Legacy | Edit 'Description' in new 'rclone_vfs.service'"
    lineinfile:
      path: "/etc/systemd/system/rclone_vfs.service"
      regexp: '^Description=.*'
      line: "Description=Rclone VFS"
      state: present

  - name: "Legacy | Edit 'AssertPathIsDirectory' in new 'rclone_vfs.service'"
    lineinfile:
      path: "/etc/systemd/system/rclone_vfs.service"
      regexp: '^AssertPathIsDirectory=.*'
      state: absent

  - name: "Legacy | Edit 'Wants' in new 'rclone_vfs.service'"
    lineinfile:
      path: "/etc/systemd/system/rclone_vfs.service"
      regexp: '^Wants=.*'
      state: absent

  - name: "Legacy | Edit 'Requires' in new 'rclone_vfs.service'"
    lineinfile:
      path: "/etc/systemd/system/rclone_vfs.service"
      regexp: '^Requires=.*'
      state: absent

  - name: "Legacy | Replace '/mnt/rclone' with '/mnt/remote' in new 'rclone_vfs.service'"
    replace:
      path: /etc/systemd/system/rclone_vfs.service
      regexp: "\\/mnt\\/rclone"
      replace: '/mnt/remote'

  - name: "Legacy | Systemd daemon-reload"
    systemd: daemon_reload=yes

  when: (rclone_service.stat.exists)

# Community - prime-rclone.service

- name: "Legacy | Check if 'prime-rclone.service' exists"
  stat:
    path: "/etc/systemd/system/prime-rclone.service"
  register: prime_rclone_service

- name: "Legacy | Tasks for 'prime-rclone.service'"
  block:

  - name: "Legacy | Stop and disable existing 'prime-rclone.service'"
    systemd: name=prime-rclone state=stopped enabled=no

  - name: "Legacy | Remove 'prime-rclone.service'"
    file:
      path: "/etc/systemd/system/prime-rclone.service"
      state: absent

  - name: "Legacy | Systemd daemon-reload"
    systemd: daemon_reload=yes

  when: (prime_rclone_service.stat.exists)

# Community - /mnt/rclone

- name: "Legacy | Check if '/mnt/rclone' exists"
  stat:
    path: "/mnt/rclone"
  register: mnt_rclone
  ignore_errors: yes

- name: "Legacy | Tasks for '/mnt/rclone' path"
  block:

  - name: "Legacy | Force unmount '/mnt/rclone'"
    shell: "/bin/umount -f '/mnt/rclone' 2>/dev/null || :"
    ignore_errors: yes

  - name: "Legacy | Remove empty directories in '/mnt/rclone'"
    shell: "find '/mnt/rclone' -type d -empty -delete"
    ignore_errors: yes

  - name: "Legacy | Recursively find '/mnt/rclone' files"
    find:
      paths: '/mnt/rclone'
      hidden: yes
      recurse: yes
    register: mnt_rclone_files

  - name: "Legacy | Backup non-empty '/mnt/rclone' path"
    shell: "mv /mnt/rclone /mnt/rclone_{{ '%Y-%m-%d_%H.%M.%S' | strftime(ansible_date_time['epoch']|int) }}"
    ignore_errors: yes
    when: (mnt_rclone_files.matched|int > 0)

  - name: "Legacy | Remove '/mnt/rclone'"
    file:
      path: "/mnt/rclone"
      state: absent

  when: (mnt_rclone is failed) or (mnt_rclone.stat.exists)
